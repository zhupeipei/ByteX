def excludeApp = false
def proFile = file("./upload.properties")
if (proFile != null) {
    Properties p = new Properties()
    try {
        proFile.withInputStream { stream ->
            p.load(stream)
        }
        excludeApp = p.excludeApp
    } catch (e) {
    }
}
if (!excludeApp) {
//    "./publish.sh".execute().waitForProcessOutput(System.out, System.err)
    include ':example'
}

//common
include ':base-plugin'
include ':common'
include ':custom-base-bytex'
include ':TransformEngine'
include ':HookProguard'
include ':ProguardConfigurationResolver'
include ':ProguardConfigurationResolver-task'
include ':ProguardConfigurationResolver-transform'
project(':ProguardConfigurationResolver').projectDir = new File('HookProguard/ProguardConfigurationResolver')
project(':ProguardConfigurationResolver-task').projectDir = new File('HookProguard/ProguardConfigurationResolver/task')
project(':ProguardConfigurationResolver-transform').projectDir = new File('HookProguard/ProguardConfigurationResolver/transform')
include ':GradleToolKit'
include ':GradleEnvApi'
project(':GradleEnvApi').projectDir = new File('GradleToolKit/GradleEnvApi')
include ':PluginConfigProcessor'
project(':PluginConfigProcessor').projectDir = new File('PluginConfig/PluginConfigProcessor')
include ':PluginConfigAnnotation'
project(':PluginConfigAnnotation').projectDir = new File('PluginConfig/PluginConfigAnnotation')

//opensource
include ':shrink-r-plugin'
include ':access-inline-plugin'
include ':getter-setter-inline-plugin'
include ':refer-check-plugin'
include ':closeable-check-plugin'
include ':serialization-check-plugin'
include ':const-inline-plugin'
include ':field-assign-opt-plugin'
include ':method-call-opt-plugin'
include ':SourceFileKiller'
include ':butterknife-check-plugin'

include ':coverage-plugin'
project(':coverage-plugin').projectDir = new File('coverage/coverage-plugin')
include ':coverage-lib'
project(':coverage-lib').projectDir = new File('coverage/coverage-lib')

//pull request
include ':webview-plugin'

include ':layout-inflater-plugin'
